--lpm_abs CARRY_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone IV E" IGNORE_CARRY_BUFFERS="OFF" LPM_WIDTH=7 data result
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_abs 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);

--synthesis_resources = lut 7 
SUBDESIGN lpm_abs_4v9
( 
	data[6..0]	:	input;
	overflow	:	output;
	result[6..0]	:	output;
) 
VARIABLE 
	cs1a[6..0] : carry_sum;
	result_tmp[6..0]	: WIRE;

BEGIN 
	cs1a[].cin = ( ((data[6..6] $ data[6..1]) & cs1a[5..0].cout), ((! data[0..0]) & data[6..6]));
	cs1a[].sin = ( ((data[6..6] $ data[6..1]) $ cs1a[5..0].cout), data[0..0]);
	overflow = (result_tmp[6..6] & data[6..6]);
	result[] = result_tmp[];
	result_tmp[] = ( cs1a[6..1].sout, data[0..0]);
END;
--VALID FILE
