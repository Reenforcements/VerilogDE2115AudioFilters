// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2016 21:25:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AudioOutputTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AudioOutputTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg AUD_ADCLRCK;
reg AUD_BCLK;
reg AUD_DACLRCK;
reg treg_SDAT;
reg clk;
reg rst;
reg sw0;
// wires                                               
wire AUD_DACDAT;
wire SDAT;
wire SDCLK;
wire errorLED;
wire initSuccessLED;
wire [6:0] ss1;
wire [6:0] ss2;

// assign statements (if any)                          
assign SDAT = treg_SDAT;
AudioOutputTest i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.SDAT(SDAT),
	.SDCLK(SDCLK),
	.clk(clk),
	.errorLED(errorLED),
	.initSuccessLED(initSuccessLED),
	.rst(rst),
	.ss1(ss1),
	.ss2(ss2),
	.sw0(sw0)
);
initial 
begin 
#2000000 $finish;
end 

// sw0
initial
begin
	sw0 = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

